CREATE TABLE IF NOT EXISTS public.users
(
    id           bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email        varchar(255)       NOT NULL UNIQUE,
    username     varchar(12)        NOT NULL UNIQUE,
    nickname     varchar(12)        NOT NULL,
    readme       varchar(512)       NOT NULL DEFAULT '',
    email_public boolean            NOT NULL DEFAULT FALSE,
    provider     user_provider_enum NOT NULL DEFAULT 'LOCAL',
    role         user_role_enum     NOT NULL DEFAULT 'MEMBER',
    created_at   timestamp(6)       NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at   timestamp(6)       NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.topics
(
    id             bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug           varchar(50)  NOT NULL UNIQUE,
    name           varchar(50)  NOT NULL UNIQUE,
    description    varchar(255) NOT NULL DEFAULT '',
    trending_score integer      NOT NULL DEFAULT 0,
    created_at     timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.articles
(
    id              bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug            varchar(255) NOT NULL,
    title           text         NOT NULL,
    content         text         NOT NULL,
    thumbnail       varchar(255) NOT NULL DEFAULT 'default/article-thumbnail.webp',
    star_count      integer      NOT NULL DEFAULT 0,
    comment_count   integer      NOT NULL DEFAULT 0,
    trending_score  integer      NOT NULL DEFAULT 0,
    created_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    writer_id       bigint       NOT NULL
        CONSTRAINT articles_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_username varchar(12)  NOT NULL,            -- for search(denormalization)
    topics_flat     text         NOT NULL DEFAULT '', -- for search(denormalization)
    CONSTRAINT articles_composite_key_idx UNIQUE (writer_username, slug)
);

CREATE TABLE IF NOT EXISTS public.article_topics
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    article_id bigint NOT NULL
        CONSTRAINT article_topics_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    topic_id   bigint NOT NULL
        CONSTRAINT article_topics_topic_id_fk REFERENCES public.topics ON DELETE CASCADE,
    UNIQUE (article_id, topic_id)
);

CREATE TABLE IF NOT EXISTS public.article_comments
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     varchar(512) NOT NULL,
    deleted     boolean      NOT NULL DEFAULT FALSE,
    reply_count integer      NOT NULL DEFAULT 0,
    created_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    article_id  bigint       NOT NULL
        CONSTRAINT article_comments_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    parent_id   bigint
        CONSTRAINT article_comments_parent_id_fk REFERENCES public.article_comments ON DELETE SET NULL,
    mention_id  bigint
        CONSTRAINT article_comments_mention_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_id   bigint       NOT NULL
        CONSTRAINT article_comments_writer_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.series
(
    id              bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug            varchar(255) NOT NULL UNIQUE,
    title           text         NOT NULL,
    description     text         NOT NULL DEFAULT '',
    thumbnail       varchar(255) NOT NULL DEFAULT 'default/series-thumbnail.webp',
    star_count      integer      NOT NULL DEFAULT 0,
    review_count    integer      NOT NULL DEFAULT 0,
    trending_score  integer      NOT NULL DEFAULT 0,
    created_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    writer_id       bigint       NOT NULL
        CONSTRAINT series_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_username varchar(12)  NOT NULL,            -- for search(denormalization)
    topics_flat     text         NOT NULL DEFAULT '', -- for search(denormalization),
    CONSTRAINT series_composite_key_idx UNIQUE (writer_username, slug)
);

CREATE TABLE IF NOT EXISTS public.series_chapters
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title      text         NOT NULL,
    content    text         NOT NULL,
    sequence   integer      NOT NULL,
    created_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    series_id  bigint       NOT NULL
        CONSTRAINT series_chapters_series_id_fk REFERENCES public.series ON DELETE CASCADE,
    writer_id  bigint       NOT NULL
        CONSTRAINT series_chapters_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    CONSTRAINT series_chapters_sequence_idx UNIQUE (series_id, sequence) DEFERRABLE INITIALLY DEFERRED
);

CREATE TABLE IF NOT EXISTS public.series_topics
(
    id        bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    series_id bigint NOT NULL
        CONSTRAINT series_topics_series_id_fk REFERENCES public.series ON DELETE CASCADE,
    topic_id  bigint NOT NULL
        CONSTRAINT series_topics_topic_id_fk REFERENCES public.topics ON DELETE CASCADE,
    UNIQUE (series_id, topic_id)
);

CREATE TABLE IF NOT EXISTS public.series_reviews
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content    varchar(512) NOT NULL,
    rating     integer      NOT NULL CHECK (rating >= 1 AND rating <= 5),
    created_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    series_id  bigint       NOT NULL
        CONSTRAINT series_reviews_series_id_fk REFERENCES public.series ON DELETE CASCADE,
    writer_id  bigint       NOT NULL
        CONSTRAINT series_reviews_writer_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.questions
(
    id                bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug              varchar(255)         NOT NULL,
    title             text                 NOT NULL,
    content           text                 NOT NULL,
    status            question_status_enum NOT NULL DEFAULT 'OPEN',
    answer_generating boolean              NOT NULL DEFAULT FALSE,
    solved_at         timestamp(6),                             -- NULL if status is not SOLVED
    closed_at         timestamp(6),                             -- NULL if status is not CLOSED
    star_count        integer              NOT NULL DEFAULT 0,
    answer_count      integer              NOT NULL DEFAULT 0,
    trending_score    integer              NOT NULL DEFAULT 0,
    created_at        timestamp(6)         NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at        timestamp(6)         NOT NULL DEFAULT CURRENT_TIMESTAMP,
    writer_id         bigint               NOT NULL
        CONSTRAINT questions_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_username   varchar(12)          NOT NULL,            -- for search(denormalization)
    topics_flat       text                 NOT NULL DEFAULT '', -- for search(denormalization)
    CONSTRAINT questions_composite_key_idx UNIQUE (writer_username, slug)
);

CREATE TABLE IF NOT EXISTS public.question_topics
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id bigint NOT NULL
        CONSTRAINT question_topics_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    topic_id    bigint NOT NULL
        CONSTRAINT question_topics_topic_id_fk REFERENCES public.topics ON DELETE CASCADE,
    UNIQUE (question_id, topic_id)
);

CREATE TABLE IF NOT EXISTS public.question_answers
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title       text         NOT NULL,
    content     text         NOT NULL,
    accepted    boolean      NOT NULL DEFAULT FALSE,
    accepted_at timestamp(6),
    created_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    question_id bigint       NOT NULL
        CONSTRAINT question_answers_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    writer_id   bigint       NOT NULL
        CONSTRAINT question_answers_writer_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.user_stars
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    target      user_star_target_enum NOT NULL,
    created_at  timestamp(6)          NOT NULL DEFAULT CURRENT_TIMESTAMP,
    article_id  bigint
        CONSTRAINT user_stars_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    series_id   bigint
        CONSTRAINT user_stars_series_id_fk REFERENCES public.series ON DELETE CASCADE,
    question_id bigint
        CONSTRAINT user_stars_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    user_id     bigint                NOT NULL
        CONSTRAINT user_stars_user_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.user_activities
(
    id           bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    action       user_action_enum NOT NULL,
    created_at   timestamp(6)     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_date date             NOT NULL DEFAULT CURRENT_DATE,
    article_id   bigint
        CONSTRAINT user_activities_article_id_fk REFERENCES public.articles ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
    series_id    bigint
        CONSTRAINT user_activities_series_id_fk REFERENCES public.series ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
    question_id  bigint
        CONSTRAINT user_activities_question_id_fk REFERENCES public.questions ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
    user_id      bigint           NOT NULL
        CONSTRAINT user_activities_user_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.support_inquiries
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email      varchar(255),
    title      text         NOT NULL,
    content    text         NOT NULL,
    checked    boolean      NOT NULL DEFAULT FALSE,
    created_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.search_synonyms
(
    term     TEXT PRIMARY KEY,
    synonyms TEXT[]
);
