CREATE SCHEMA IF NOT EXISTS public;

CREATE EXTENSION IF NOT EXISTS pgroonga;
CREATE EXTENSION IF NOT EXISTS pg_cron;

DO 'BEGIN IF NOT EXISTS ( SELECT 1 FROM pg_type WHERE typname = ''user_provider_enum'' ) THEN CREATE TYPE user_provider_enum AS ENUM (''LOCAL'',''GOOGLE'',''GITHUB''); END IF; END' LANGUAGE plpgsql;
DO 'BEGIN IF NOT EXISTS ( SELECT 1 FROM pg_type WHERE typname = ''user_role_enum'' ) THEN CREATE TYPE user_role_enum AS ENUM (''MEMBER'',''ADMIN'',''BOT''); END IF; END' LANGUAGE plpgsql;
CREATE TABLE IF NOT EXISTS public.users
(
    id            bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email         varchar(255)       NOT NULL UNIQUE,
    username      varchar(12)        NOT NULL UNIQUE,
    nickname      varchar(12)        NOT NULL,
    readme        text               NOT NULL DEFAULT '',
    email_visible boolean            NOT NULL DEFAULT FALSE,
    star_visible  boolean            NOT NULL DEFAULT TRUE,
    provider      user_provider_enum NOT NULL DEFAULT 'LOCAL',
    role          user_role_enum     NOT NULL DEFAULT 'MEMBER',
    created_at    timestamp(6)       NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    timestamp(6)       NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.topics
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug        varchar(50)  NOT NULL UNIQUE,
    name        varchar(50)  NOT NULL UNIQUE,
    description varchar(255) NOT NULL DEFAULT '',
    created_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.articles
(
    id              bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug            varchar(50)  NOT NULL,
    title           text         NOT NULL,
    content         text         NOT NULL,
    thumbnail       varchar(255) NOT NULL DEFAULT 'default/thumbnail.webp',
    star_count      integer      NOT NULL DEFAULT 0,
    comment_count   integer      NOT NULL DEFAULT 0,
    trending_score  integer      NOT NULL DEFAULT 0,
    created_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    writer_id       bigint       NOT NULL
        CONSTRAINT articles_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_username varchar(12)  NOT NULL,            -- for search(denormalization)
    topics_flat     text         NOT NULL DEFAULT '', -- for search(denormalization)
    CONSTRAINT articles_composite_key_idx UNIQUE (writer_username, slug)
);
CREATE INDEX IF NOT EXISTS articles_search_idx ON public.articles USING pgroonga ((ARRAY [title, content, writer_username, topics_flat])) WITH (tokenizer='TokenMecab');

CREATE TABLE IF NOT EXISTS public.article_topics
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    article_id bigint NOT NULL
        CONSTRAINT article_topics_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    topic_id   bigint NOT NULL
        CONSTRAINT article_topics_topic_id_fk REFERENCES public.topics ON DELETE CASCADE,
    UNIQUE (article_id, topic_id)
);

CREATE TABLE IF NOT EXISTS public.article_comments
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     varchar(512) NOT NULL,
    deleted     boolean      NOT NULL DEFAULT FALSE,
    reply_count integer      NOT NULL DEFAULT 0,
    created_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    article_id  bigint       NOT NULL
        CONSTRAINT article_comments_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    parent_id   bigint
        CONSTRAINT article_comments_parent_id_fk REFERENCES public.article_comments ON DELETE SET NULL,
    mention_id  bigint
        CONSTRAINT article_comments_mention_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_id   bigint       NOT NULL
        CONSTRAINT article_comments_writer_id_fk REFERENCES public.users ON DELETE CASCADE
);

DO 'BEGIN IF NOT EXISTS ( SELECT 1 FROM pg_type WHERE typname = ''question_status_enum'' ) THEN CREATE TYPE question_status_enum AS ENUM (''OPEN'', ''CLOSED'', ''SOLVED''); END IF; END' LANGUAGE plpgsql;
CREATE TABLE IF NOT EXISTS public.questions
(
    id              bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug            varchar(50)          NOT NULL,
    title           text                 NOT NULL,
    content         text                 NOT NULL,
    status          question_status_enum NOT NULL DEFAULT 'OPEN',
    solved_at       timestamp(6),                             -- NULL if status is not SOLVED
    star_count      integer              NOT NULL DEFAULT 0,
    answer_count    integer              NOT NULL DEFAULT 0,
    trending_score  integer              NOT NULL DEFAULT 0,
    created_at      timestamp(6)         NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      timestamp(6)         NOT NULL DEFAULT CURRENT_TIMESTAMP,
    writer_id       bigint               NOT NULL
        CONSTRAINT questions_writer_id_fk REFERENCES public.users ON DELETE CASCADE,
    writer_username varchar(12)          NOT NULL,            -- for search(denormalization)
    topics_flat     text                 NOT NULL DEFAULT '', -- for search(denormalization)
    CONSTRAINT questions_composite_key_idx UNIQUE (writer_username, slug)
);
CREATE INDEX IF NOT EXISTS questions_search_idx ON public.questions USING pgroonga ((ARRAY [title, content, writer_username, topics_flat])) WITH (tokenizer='TokenMecab');

CREATE TABLE IF NOT EXISTS public.question_topics
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id bigint NOT NULL
        CONSTRAINT question_topics_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    topic_id    bigint NOT NULL
        CONSTRAINT question_topics_topic_id_fk REFERENCES public.topics ON DELETE CASCADE,
    UNIQUE (question_id, topic_id)
);

CREATE TABLE IF NOT EXISTS public.answers
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     text         NOT NULL,
    accepted    boolean      NOT NULL DEFAULT FALSE,
    accepted_at timestamp(6),
    created_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    question_id bigint       NOT NULL
        CONSTRAINT answers_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    writer_id   bigint       NOT NULL
        CONSTRAINT answers_writer_id_fk REFERENCES public.users ON DELETE CASCADE
);


DO 'BEGIN IF NOT EXISTS ( SELECT 1 FROM pg_type WHERE typname = ''star_target_enum'' ) THEN CREATE TYPE star_target_enum AS ENUM (''ARTICLE'',''QUESTION''); END IF; END' LANGUAGE plpgsql;
CREATE TABLE IF NOT EXISTS public.stars
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    target      star_target_enum NOT NULL,
    created_at  timestamp(6)     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    article_id  bigint
        CONSTRAINT stars_article_id_fk REFERENCES public.articles ON DELETE CASCADE,
    question_id bigint
        CONSTRAINT stars_question_id_fk REFERENCES public.questions ON DELETE CASCADE,
    user_id     bigint           NOT NULL
        CONSTRAINT stars_user_id_fk REFERENCES public.users ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.search_synonyms
(
    term     TEXT PRIMARY KEY,
    synonyms TEXT[]
);
